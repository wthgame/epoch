{
	// Place your Epoch workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Import plugin root": {
		"scope": "luau",
		"prefix": "epoch",
		"body": [
			"local Epoch = script:FindFirstAncestor(\"Epoch\")"
		],
		"description": "Import plugin root"
	},
	"Require from plugin root": {
		"scope": "luau",
		"prefix": "require epoch",
		"body": [
			"local ${1:module} = require(Epoch.${2:path})"
		],
		"description": "Require from plugin root"
	},
	"Require Vide from plugin root": {
		"scope": "luau",
		"prefix": "require vide",
		"body": [
			"local Vide = require(Epoch.Vide)"
		],
		"description": "Require from plugin root"
	},
	"Tiniest spec": {
		"scope": "luau",
		"prefix": "spec",
		"body": [
			"local Epoch = script:FindFirstAncestor(\"Epoch\")",
			"",
			"local Tiniest = require(Epoch.Packages.Tiniest)",
			"local ${1:module} = require(script.Parent.${1:module})",
			"",
			"return function(tiniest: Tiniest.Configured)",
			"\tlocal test = tiniest.test",
			"\tlocal expect = tiniest.expect",
			"",
			"\t$0",
			"end"
		]
	}
}